#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import argparse
import subprocess
try:
    from nBee import verify_path, ends_with_slash, is_path_exists, file_to_list, external_route, filename_only
except ModuleNotFoundError:
    print("Make sure the following scripts are in the same directory: 'refdata2schedule.py', 'regex_slicer.py', 'nBee.py', 'matryoshka.py', 'sam2coverage.py'")
    sys.exit(2)


def parse_args():
    starting_parser = argparse.ArgumentParser(description="This script will align and extract coverage from colorspace or non-colorspace reads mapped on reference. It requires a refdata file generated by 'cook_the_reference.py' script. \nWorkflow steps: \n0) bowtie1/2 alignment; \n1) SAM file processing \n2) Coverage extraction")
    starting_parser.add_argument("-i", "--input", required=True,
                                 help="Text file containing 2-3 tab-delimited columns: sample name and path(s) to reads file(s)")
    starting_parser.add_argument("-r", "--refdata", required=True,
                                 help="Linker file generated by the 'cook_the_reference.py' script")
    starting_parser.add_argument("-c", "--no_coverage", default=False, action='store_true',
                                 help="(Optional) If selected, cancels coverage extraction")
    starting_parser.add_argument("-n", "--nodes", default=None,
                                 help="(Optional) Comma-divided list of nodes or text file with authentication data one per line formatted like: 'node:username:password:port'")
    starting_parser.add_argument("-m", "--mask", default=None, required=True,
                                 help="Mask to be added to resulting files. Note that the reference sequence file name shall also append the mask")
    starting_parser.add_argument("-t", "--threads", default=None, type=int,
                                 help="Number of CPU cores to use, maximal by default")
    starting_parser.add_argument("-o", "--output", required=True,
                                 help="Output directory")
    return starting_parser.parse_args()


def parse_namespace():
    namespace = parse_args()
    script_directory = ends_with_slash('/'.join(os.path.abspath(sys.argv[0]).split('/')[:-1]))
    script_files = [script_directory + i for i in ['refdata2schedule.py', 'regex_slicer.py', 'nBee.py', 'matryoshka.py', 'sam2coverage.py']]
    for file in script_files + [namespace.input, namespace.refdata]:
        verify_path(file, 'file')
    if not namespace.threads:
        namespace.threads = subprocess.getoutput("nproc")
    namespace.output = ends_with_slash(namespace.output)
    is_path_exists(namespace.output + "sampledata")
    return namespace.input, namespace.refdata, namespace.no_coverage, namespace.nodes, namespace.mask, str(namespace.threads), namespace.output


def list_to_file(header, list_to_write, file_to_write):
    header += ''.join(str(i) for i in list_to_write if i is not None)
    file = open(file_to_write, 'w')
    file.write(header)
    file.close()


if __name__ == '__main__':
    inputSampleData, inputRefData, noCoverageExtractionBool, inputNodes, inputMask, inputThreads, outputDir = parse_namespace()
    scriptDir = ends_with_slash('/'.join(os.path.abspath(sys.argv[0]).split('/')[:-1]))
    # RefData columns: FASTA, BWTI, BWT2I, FAI, GENOME, ANNOTATION
    for refdata_chunk_list in [i.split('\t') for i in file_to_list(inputRefData)]:
        refDataChunkFileName = outputDir + "sampledata/" + filename_only(inputRefData) + filename_only(refdata_chunk_list[0]) + ".refdata"
        list_to_file('', ['\t'.join(refdata_chunk_list)], refDataChunkFileName)
        print("Processing reference data linker file", refDataChunkFileName)
        chunksNumber = str(len(list(filter(None, inputNodes.split(',')))))
        print(external_route(["python", scriptDir + "regex_slicer.py", "-i", inputSampleData, "-n", chunksNumber, "-o", outputDir + "sampledata/"], None))
        print("Completed saving", chunksNumber, "chunks list to" + outputDir + '.'.join(inputSampleData.split('/')[-1].split('.')[:-1]) + ".chunkslist")
        # nBee.py -i <file> -r <refdata> -m <str> -o <dir>
        wrapper_queue = 'python3 ' + scriptDir + 'nBee.py -i $0 -r ' + refDataChunkFileName + ' -m ' + inputMask + '_' + filename_only(refdata_chunk_list[0]) + ' -t ' + inputThreads + ' -o ' + outputDir
        if noCoverageExtractionBool:
            wrapper_queue += " -n"
        print("Building main queue for " + refDataChunkFileName, "alignment on", inputRefData, "on", chunksNumber, "nodes. Please wait...")
        main_queue = ["python3", scriptDir + "matryoshka.py", "-i", outputDir + "sampledata/" + filename_only(inputSampleData) + ".chunkslist", "-o", outputDir + "remote/" + inputMask + '_' + filename_only(refdata_chunk_list[0]), "-w", "-n", inputNodes, "-s", wrapper_queue]
        print(external_route(main_queue, None))
        print("Scheduling is complete. Check the directory: " + outputDir)
